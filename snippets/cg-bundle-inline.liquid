{%- comment -%}
CG Bundle Inline – Optimiert (keine Reloads, bleibt sichtbar)
- Hauptprodukt + erstes Complementary (Metafield, sonst Fallback via Recommendations API)
- Mengen entfernt (immer 1 + 1)
- Gesamtpreis live (bei Variantwechsel)
- AJAX-Add + Cart-UI refresh + Drawer-Open (Best-Effort)
- Nach Erfolg: Button-Label "Im Warenkorb", Zusatzprodukt bleibt sichtbar (kein Entfernen)
{%- endcomment -%}

{%- assign heading = heading | default: 'Passend dazu – im Bundle' -%}
{%- assign allow_variant_select = allow_variant_select | default: true -%}
{%- assign open_drawer = open_drawer | default: true -%}
{%- assign debug = debug | default: false -%}

{%- assign comps = product.metafields['shopify--discovery']['product_recommendation.complementary_products'].value -%}

<section class="cg-bundle"
  data-cg-bundle
  data-product-id="{{ product.id }}"
  data-allow-variant="{{ allow_variant_select }}"
  data-open-drawer="{{ open_drawer }}"
  data-debug="{{ debug }}"
  data-money-format='{{ shop.money_format | json }}'
  data-currency='{{ shop.currency | json }}'>

  <h3 class="cg-bundle__heading">{{ heading }}</h3>

  <div class="cg-bundle__row">
    <!-- Linke Kachel: Hauptprodukt -->
    <article class="cg-bundle__card cg-bundle__card--main"
             data-main-price="{{ product.selected_or_first_available_variant.price }}"
             data-main-compare="{{ product.selected_or_first_available_variant.compare_at_price | default: 0 }}"
             data-main-variant-id="{{ product.selected_or_first_available_variant.id }}">
      <div class="cg-bundle__media">
        {%- assign main_img = product.featured_image | default: product.images.first -%}
        {%- if main_img -%}
          {{ main_img
            | image_url: width: 720
            | image_tag:
                alt: product.title,
                loading: 'lazy',
                class: 'cg-bundle__img',
                sizes: '(min-width:980px) 96px, 33vw',
                widths: '96,144,192,288,384,576'
          }}
        {%- endif -%}
      </div>
      <div class="cg-bundle__body">
        <h4 class="cg-bundle__title">{{ product.title }}</h4>
        {%- assign v = product.selected_or_first_available_variant -%}
        <div class="cg-bundle__price">
          {%- if v.compare_at_price > v.price -%}
            <span class="cg-bundle__price--sale">{{ v.price | money }}</span>
            <s class="cg-bundle__price--compare">{{ v.compare_at_price | money }}</s>
          {%- else -%}
            <span>{{ v.price | money }}</span>
          {%- endif -%}
        </div>
      </div>
    </article>

    <!-- Plus -->
    <div class="cg-bundle__plus" aria-hidden="true">+</div>

    <!-- Rechte Kachel: Ergänzungsprodukt -->
    <article class="cg-bundle__card cg-bundle__card--comp" data-role="comp">
      {%- if comps != blank and comps.size > 0 -%}
        {%- assign comp = comps | first -%}
        {%- assign comp_variant = comp.selected_or_first_available_variant -%}
        <div class="cg-bundle__media">
          {%- assign comp_img = comp.featured_image | default: comp.images.first -%}
          {%- if comp_img -%}
            {{ comp_img
              | image_url: width: 720
              | image_tag:
                  alt: comp.title,
                  loading: 'lazy',
                  class: 'cg-bundle__img',
                  sizes: '(min-width:980px) 96px, 33vw',
                  widths: '96,144,192,288,384,576'
            }}
          {%- endif -%}
        </div>
        <div class="cg-bundle__body"
             data-comp-product-id="{{ comp.id }}"
             data-comp-variant-id="{{ comp_variant.id }}"
             data-comp-price="{{ comp_variant.price }}"
             data-comp-compare="{{ comp_variant.compare_at_price | default: 0 }}">
          <h4 class="cg-bundle__title">{{ comp.title }}</h4>

          {%- if comp.variants.size > 1 and allow_variant_select -%}
            <label class="cg-bundle__select">
              <span>Variante</span>
              <select data-role="comp-variant">
                {%- for vv in comp.variants -%}
                  <option value="{{ vv.id }}"
                          data-price="{{ vv.price }}"
                          data-compare="{{ vv.compare_at_price | default: 0 }}"
                          {% if vv.available %}{% else %}disabled{% endif %}
                          {% if vv.id == comp_variant.id %}selected{% endif %}>
                    {{ vv.title }}{% unless vv.available %} – ausverkauft{% endunless %}
                  </option>
                {%- endfor -%}
              </select>
            </label>
          {%- else -%}
            <input type="hidden" data-role="comp-variant"
                   value="{{ comp_variant.id }}"
                   data-price="{{ comp_variant.price }}"
                   data-compare="{{ comp_variant.compare_at_price | default: 0 }}">
          {%- endif -%}

          <div class="cg-bundle__price">
            {%- if comp_variant.compare_at_price > comp_variant.price -%}
              <span class="cg-bundle__price--sale">{{ comp_variant.price | money }}</span>
              <s class="cg-bundle__price--compare">{{ comp_variant.compare_at_price | money }}</s>
            {%- else -%}
              <span>{{ comp_variant.price | money }}</span>
            {%- endif -%}
          </div>
        </div>
      {%- else -%}
        <div class="cg-bundle__empty" data-role="comp-empty">Kein Ergänzungsprodukt gefunden.</div>
      {%- endif -%}
    </article>
  </div>

  <!-- Footer: Total + CTA -->
  <div class="cg-bundle__footer">
    <div class="cg-bundle__total">
      <span>Gesamt:</span> <strong data-role="bundle-total">–</strong>
    </div>
    <button type="button" class="cg-bundle__btn" data-role="bundle-add">Beide in den Warenkorb</button>
    <div class="cg-bundle__msg" aria-live="polite"></div>
  </div>
</section>

<script>
(() => {
  const root = document.currentScript.previousElementSibling;
  if (!root || !root.matches('[data-cg-bundle]')) return;

  const DEBUG = root.getAttribute('data-debug') === 'true';
  const OPEN_DRAWER = root.getAttribute('data-open-drawer') === 'true';
  const moneyFormat = JSON.parse(root.getAttribute('data-money-format') || '"€{{amount}}"');
  const currency = JSON.parse(root.getAttribute('data-currency') || '"EUR"');

  function log(...a){ if (DEBUG) console.log('[CG-BUNDLE]', ...a); }

  function formatMoney(cents){
    if (window.Shopify && typeof Shopify.formatMoney === 'function') {
      return Shopify.formatMoney(cents, moneyFormat);
    }
    try { return new Intl.NumberFormat(undefined,{style:'currency',currency}).format(cents/100); }
    catch { return (cents/100).toFixed(2)+' '+currency; }
  }

  function getMainVariantId(){
    const idInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
    if (idInput && idInput.value) return parseInt(idInput.value,10);
    return parseInt(root.querySelector('[data-main-variant-id]').getAttribute('data-main-variant-id'),10);
  }
  function getMainPrice(){ return parseInt(root.querySelector('[data-main-price]').getAttribute('data-main-price')||'0',10); }
  function getCompPrice(){
    const el = root.querySelector('[data-role="comp-variant"]');
    const p = el?.selectedOptions?.[0]?.getAttribute('data-price') || el?.getAttribute?.('data-price') || '0';
    return parseInt(p,10);
  }
  function updateTotal(){
    root.querySelector('[data-role="bundle-total"]').textContent = formatMoney(getMainPrice()+getCompPrice());
  }

  // --- Fallback laden (API) falls Metafield leer ---
  async function fetchComplementary(){
    const pid = root.getAttribute('data-product-id');
    const res = await fetch(`/recommendations/products.json?product_id=${pid}&intent=complementary&limit=4`);
    if (!res.ok) throw new Error('recommendations failed');
    const data = await res.json();
    return Array.isArray(data.products) ? data.products : data;
  }
  function renderCompFromAPI(p){
    const card = root.querySelector('[data-role="comp"]');
    const allowVariant = root.getAttribute('data-allow-variant') === 'true';
    const img = (p.featured_image && p.featured_image.url) || (p.images && p.images[0] && p.images[0].url) || '';

    const media = img ? `<div class="cg-bundle__media"><img src="${img}&width=384" width="96" height="96" class="cg-bundle__img" alt="${p.title}"></div>` : '';
    const firstVar = (p.variants && p.variants.length) ? p.variants[0] : null;

    let variantHTML = '';
    if (allowVariant && p.variants && p.variants.length > 1) {
      variantHTML = `
        <label class="cg-bundle__select">
          <span>Variante</span>
          <select data-role="comp-variant">
            ${p.variants.map(v => `<option value="${v.id}" data-price="${v.price}" ${v.available?'':'disabled'}>${v.title}${v.available?'':' – ausverkauft'}</option>`).join('')}
          </select>
        </label>`;
    } else if (firstVar) {
      variantHTML = `<input type="hidden" data-role="comp-variant" value="${firstVar.id}" data-price="${firstVar.price}">`;
    }

    const price = firstVar ? formatMoney(firstVar.price) : '';
    const compare = (firstVar && firstVar.compare_at_price && firstVar.compare_at_price > firstVar.price)
      ? `<s class="cg-bundle__price--compare">${formatMoney(firstVar.compare_at_price)}</s>` : '';

    card.innerHTML = `
      ${media}
      <div class="cg-bundle__body" data-comp-product-id="${p.id}">
        <h4 class="cg-bundle__title">${p.title}</h4>
        <div class="cg-bundle__price"><span class="cg-bundle__price--sale">${price}</span>${compare}</div>
        ${variantHTML}
      </div>`;
    const sel = root.querySelector('[data-role="comp-variant"]');
    sel && sel.addEventListener('change', updateTotal);
  }
  async function ensureComp(){
    if (!root.querySelector('[data-role="comp-empty"]')) { updateTotal(); return; }
    try{
      const list = await fetchComplementary();
      const first = Array.isArray(list) ? list[0] : (list.products && list.products[0]);
      if (first) { renderCompFromAPI(first); updateTotal(); }
      else {
        root.querySelector('.cg-bundle__plus').style.display = 'none';
        root.querySelector('[data-role="comp"]').style.display = 'none';
        root.querySelector('[data-role="bundle-total"]').textContent = formatMoney(getMainPrice());
        const btn = root.querySelector('[data-role="bundle-add"]');
        btn.disabled = true; btn.textContent = 'Kein Ergänzungsprodukt';
      }
    }catch(e){
      root.querySelector('.cg-bundle__plus').style.display = 'none';
      root.querySelector('[data-role="comp"]').style.display = 'none';
      root.querySelector('[data-role="bundle-total"]').textContent = formatMoney(getMainPrice());
      const btn = root.querySelector('[data-role="bundle-add"]');
      btn.disabled = true; btn.textContent = 'Derzeit nicht verfügbar';
    }
  }

  // --- Warenkorb ohne Reload aktualisieren ---
  async function refreshCartUI(){
    try{
      const res = await fetch('/cart.js');
      if (!res.ok) return;
      const cart = await res.json();
      const cnt = document.querySelector('[data-cart-count], .cart-count-bubble .text, .site-header__cart-count');
      if (cnt) { cnt.textContent = cart.item_count; cnt.style.display = cart.item_count ? '' : 'none'; }
      ['cart:refresh','cart:updated','theme:cart:open','cart:open'].forEach(
        n => document.dispatchEvent(new CustomEvent(n,{detail:{source:'cg-bundle',cart}}))
      );
      if (OPEN_DRAWER) {
        const toggle = document.querySelector('[data-drawer-trigger="cart"], [data-cart-toggle], button[aria-controls*="Cart"], a[href="/cart"]');
        if (toggle) try { toggle.click(); } catch {}
      }
    }catch(e){}
  }

  async function addBothToCart(){
    const btn = root.querySelector('[data-role="bundle-add"]');
    const msg = root.querySelector('.cg-bundle__msg');
    const mainId = getMainVariantId();
    const compEl = root.querySelector('[data-role="comp-variant"]');
    const compId = compEl ? parseInt(compEl.value,10) : null;

    if (!compId) { msg.textContent = 'Bitte Variante wählen.'; return; }

    btn.disabled = true; btn.classList.add('is-loading'); msg.textContent = 'Wird hinzugefügt …';
    try{
      const res = await fetch('/cart/add.js',{
        method:'POST',
        headers:{'Content-Type':'application/json','Accept':'application/json'},
        body: JSON.stringify({ items:[ {id:mainId,quantity:1}, {id:compId,quantity:1} ] })
      });
      if (!res.ok) throw new Error('add failed');

      btn.textContent = 'Im Warenkorb';
      btn.classList.remove('is-loading');
      msg.textContent = '';
      await refreshCartUI();   // ohne Seiten-Reload
      // Card bleibt sichtbar, Button bleibt disabled (kein doppeltes Hinzufügen)
    }catch(e){
      btn.disabled = false; btn.classList.remove('is-loading');
      msg.textContent = 'Konnte nicht hinzugefügt werden. Bitte erneut versuchen.';
    }
  }

  // Init
  updateTotal();
  ensureComp();
  const sel = root.querySelector('[data-role="comp-variant"]');
  sel && sel.addEventListener('change', updateTotal);
  root.querySelector('[data-role="bundle-add"]').addEventListener('click', addBothToCart);
})();
</script>
