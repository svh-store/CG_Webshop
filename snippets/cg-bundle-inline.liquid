{%- comment -%}
CG Bundle Inline – FINAL (sichtbarer Gesamtpreis, engeres Layout, klickbarer Cross-Sell)
{%- endcomment -%}

{%- assign heading              = heading | default: 'PASSEND DAZU – IM BUNDLE' -%}
{%- assign allow_variant_select = allow_variant_select | default: true -%}
{%- assign open_drawer          = open_drawer | default: true -%}
{%- assign debug                = debug | default: false -%}
{%- assign auk_style            = auk_style | default: true -%}

{%- comment -%} Metafeld ermitteln (mit Fallbacks) {%- endcomment -%}
{%- assign mf_ns  = mf_ns  | default: 'shopify--discovery--product_recommendation' -%}
{%- assign mf_key = mf_key | default: 'complementary_products' -%}
{%- assign primary_mf = product.metafields[mf_ns][mf_key] -%}
{%- assign alt_mf1    = product.metafields['shopify--discovery']['product_recommendation.complementary_products'] -%}
{%- assign alt_mf2    = product.metafields['shopify--discovery--product_recommendation']['complementary_products'] -%}
{%- assign mf = nil -%}
{%- if primary_mf and primary_mf.value -%}
  {%- assign mf = primary_mf -%}
{%- elsif alt_mf1 and alt_mf1.value -%}
  {%- assign mf = alt_mf1 -%}
{%- elsif alt_mf2 and alt_mf2.value -%}
  {%- assign mf = alt_mf2 -%}
{%- endif -%}

{%- comment -%} Ein einzelnes Cross-Sell Produkt bestimmen {%- endcomment -%}
{%- assign comp = nil -%}
{%- if mf and mf.type == 'product_reference' and mf.value -%}
  {%- assign comp = mf.value -%}
{%- elsif mf and mf.type == 'list.product_reference' and mf.value != blank -%}
  {%- assign comp = mf.value | first -%}
{%- endif -%}

{%- if comp -%}
<section class="cg-bundle{% if auk_style %} cg-bundle--auk{% endif %}"
  data-cg-bundle
  data-product-id="{{ product.id }}"
  data-allow-variant="{{ allow_variant_select }}"
  data-open-drawer="{{ open_drawer }}"
  data-debug="{{ debug }}"
  data-money-format='{{ shop.money_format | json }}'
  data-currency='{{ shop.currency | json }}'>

  <style>
    .cg-bundle{
      --line:#e9ecef; --accent:#F19222; --text:#111; --muted:#666;
      --tile-desktop: 180px; --tile-mobile: 140px;
      max-width:1320px; margin:26px auto; padding:24px 16px;
      border-top:1px solid var(--line); border-bottom:1px solid var(--line);
      background:transparent;
    }
    .cg-bundle__heading{
      text-transform:uppercase; font-weight:900; letter-spacing:.06em;
      font-family: var(--font-heading-family, var(--heading-font-family, inherit));
      font-style: var(--font-heading-style, normal);
      font-size: clamp(2.0rem, 2.0vw, 2.6rem);
      color: var(--color-foreground, var(--text,#111));
      text-align:center; margin:0 0 18px;
    }

    /* Enges Desktop-Grid: Bild1 +, Bild2 =, rechte Spalte */
    .cg-bundle__row{
      display:grid;
      grid-template-columns: max-content 10px max-content 14px 280px;
      column-gap:14px; align-items:center; justify-content:center;
    }
    .cg-bundle__card{display:flex;flex-direction:column;align-items:center;text-align:center;gap:8px;background:transparent;border:0}

    /* Dünner grauer Rahmen um Bilder */
    .cg-bundle__media{
      width:var(--tile-desktop); aspect-ratio:1/1;
      display:flex; align-items:center; justify-content:center;
      background:#fff !important;
      border:1px solid #e5e7eb !important; border-radius:14px;
      padding:8px; box-sizing:border-box;
    }
    .cg-bundle__media::before{ content:none !important; }
    .cg-bundle__img{
      max-width:100% !important; max-height:100% !important;
      width:auto !important; height:auto !important; object-fit:contain; border-radius:8px;
    }
 
    .cg-bundle__media:hover{
      border-color: var(--btn-bg);
      transform: translateY(-1px);
      box-shadow: 0 4px 18px rgba(0,0,0,.06);

    /* Cross-Sell anklickbar */
    .cg-bundle__link{ display:inline-flex; flex-direction:column; align-items:center; gap:8px; text-decoration:none; color:inherit; }

    .cg-bundle__title{font-weight:700;color:var(--text);font-size:.95rem;line-height:1.25;margin-top:2px;text-align:center;max-width:220px}
    .cg-bundle__price{color:var(--text);font-size:.9rem}
    .cg-bundle__price--compare{color:var(--muted);margin-left:6px}

    .cg-bundle__plus, .cg-bundle__equals{ color:#111; font-size:2rem; line-height:1; text-align:center; }

    /* Rechte Spalte mit harter Sichtbarkeit des Gesamtpreises */
    .cg-bundle__aside{ display:flex; flex-direction:column; gap:10px; align-items:flex-start; }
    .cg-bundle__total--stack{ display:flex; flex-direction:column; gap:8px; align-items:flex-start; }
    .cg-bundle__total-label{ font-size:.82rem; color:#6b7280; font-weight:600; }
    .cg-bundle__total-amount{
      display:block !important; visibility:visible !important;
      color:var(--text,#111) !important;
      font-weight:800; line-height:1.1;
      font-size: clamp(2.2rem, 2.6vw, 3.0rem) !important;
      white-space:nowrap;
      min-width:6ch;
    }

    .cg-bundle__btn{
      align-self:flex-start; appearance:none; border:none; cursor:pointer;
      padding:12px 18px; border-radius:6px; background:var(--accent); color:#fff; font-weight:800;
    }
    .cg-bundle__btn.is-loading{ opacity:.7; cursor:wait; }
    .cg-bundle__btn:disabled{ opacity:.6; cursor:default; }
    .cg-bundle__msg{font-size:.9rem;color:var(--muted)}
    .cg-bundle__footer{ display:none; }

    @media (max-width:980px){
      .cg-bundle{ padding:20px 12px; }
      .cg-bundle__row{ grid-template-columns:1fr; gap:14px; }
      .cg-bundle__plus, .cg-bundle__equals{ display:none; }
      .cg-bundle__media{ width:var(--tile-mobile); }
      .cg-bundle__aside{ align-items:stretch; }
      .cg-bundle__btn{ align-self:stretch; text-align:center; }
    }
  </style>

  <div class="cg-bundle__heading">{{ heading }}</div>

  <div class="cg-bundle__row">
    <!-- Hauptprodukt -->
    <article class="cg-bundle__card cg-bundle__card--main"
      data-main-price="{{ product.selected_or_first_available_variant.price }}"
      data-main-compare="{{ product.selected_or_first_available_variant.compare_at_price | default: 0 }}"
      data-main-variant-id="{{ product.selected_or_first_available_variant.id }}">
      <div class="cg-bundle__media">
        {%- assign main_img = product.featured_image | default: product.images.first -%}
        {%- if main_img -%}
          {{ main_img
            | image_url: width: 700, format: 'pjpg'
            | image_tag:
                alt: product.title,
                loading: 'lazy',
                decoding: 'async',
                class: 'cg-bundle__img',
                sizes: '(min-width:980px) 180px, 140px',
                widths: '140, 180, 280, 360' }}
        {%- endif -%}
      </div>
      <div class="cg-bundle__title">{{ product.title }}</div>
      {%- assign v = product.selected_or_first_available_variant -%}
      <div class="cg-bundle__price">
        {%- if v.compare_at_price > v.price -%}
          <span class="cg-bundle__price--sale">{{ v.price | money }}</span>
          <s class="cg-bundle__price--compare">{{ v.compare_at_price | money }}</s>
        {%- else -%}
          <span>{{ v.price | money }}</span>
        {%- endif -%}
      </div>
    </article>

    <!-- Plus -->
    <div class="cg-bundle__plus" aria-hidden="true">+</div>

    <!-- Cross-Sell (klickbar) -->
    <article class="cg-bundle__card cg-bundle__card--comp" data-role="comp">
      {%- assign comp_variant = comp.selected_or_first_available_variant -%}

      <a class="cg-bundle__link" href="{{ comp.url }}" aria-label="{{ comp.title }}">
        <div class="cg-bundle__media">
          {%- assign comp_img = comp.featured_image | default: comp.images.first -%}
          {%- if comp_img -%}
            {{ comp_img
              | image_url: width: 700, format: 'pjpg'
              | image_tag:
                  alt: comp.title,
                  loading: 'lazy',
                  decoding: 'async',
                  class: 'cg-bundle__img',
                  sizes: '(min-width:980px) 180px, 140px',
                  widths: '140, 180, 280, 360' }}
          {%- endif -%}
        </div>
        <div class="cg-bundle__title">{{ comp.title }}</div>
      </a>

      {%- if comp.variants.size > 1 and allow_variant_select -%}
        <label class="cg-bundle__select">
          <span>Variante</span>
          <select data-role="comp-variant">
            {%- for vv in comp.variants -%}
              <option value="{{ vv.id }}" data-price="{{ vv.price }}"
                data-compare="{{ vv.compare_at_price | default: 0 }}"
                {% if vv.available %}{% else %}disabled{% endif %}
                {% if vv.id == comp_variant.id %}selected{% endif %}>
                {{ vv.title }}{% unless vv.available %} – ausverkauft{% endunless %}
              </option>
            {%- endfor -%}
          </select>
        </label>
      {%- else -%}
        <input type="hidden" data-role="comp-variant"
          value="{{ comp_variant.id }}"
          data-price="{{ comp_variant.price }}"
          data-compare="{{ comp_variant.compare_at_price | default: 0 }}">
      {%- endif -%}

      <div class="cg-bundle__price">
        {%- if comp_variant.compare_at_price > comp_variant.price -%}
          <span class="cg-bundle__price--sale">{{ comp_variant.price | money }}</span>
          <s class="cg-bundle__price--compare">{{ comp_variant.compare_at_price | money }}</s>
        {%- else -%}
          <span>{{ comp_variant.price | money }}</span>
        {%- endif -%}
      </div>
    </article>

    <!-- Gleich + rechte Spalte -->
    <div class="cg-bundle__equals" aria-hidden="true">=</div>
    <div class="cg-bundle__aside">
      <div class="cg-bundle__total cg-bundle__total--stack">
        <div class="cg-bundle__total-label">Gesamtpreis</div>
        <div class="cg-bundle__total-amount" data-role="bundle-total">–</div>
      </div>
      <button type="button" class="cg-bundle__btn" data-role="bundle-add">BEIDE IN DEN WARENKORB</button>
      <div class="cg-bundle__msg" aria-live="polite"></div>
    </div>
  </div>
</section>

<script>
(() => {
  const root = document.currentScript.previousElementSibling;
  if (!root || !root.matches('.cg-bundle')) return;

  const DEBUG = root.getAttribute('data-debug') === 'true';
  const OPEN_DRAWER = root.getAttribute('data-open-drawer') === 'true';
  const moneyFormat = JSON.parse(root.getAttribute('data-money-format') || '"€{{amount}}"');
  const currency = JSON.parse(root.getAttribute('data-currency') || '"EUR"');
  const log = (...a)=>{ if (DEBUG) console.log('[CG-BUNDLE]', ...a); };

  /* Preise berechnen */
  const mainPrice = parseInt(root.querySelector('[data-main-price]').getAttribute('data-main-price')||'0',10);
  const compEl = () => root.querySelector('[data-role="comp-variant"]');
  const compPrice = () => {
    const el = compEl();
    const p = el?.selectedOptions?.[0]?.dataset.price || el?.dataset?.price || '0';
    return parseInt(p,10);
  };
  const fmt = (c)=> (window.Shopify?.formatMoney)
    ? Shopify.formatMoney(c, moneyFormat)
    : new Intl.NumberFormat(undefined,{style:'currency',currency}).format(c/100);

  const writeTotal = (v) => {
    root.querySelectorAll('[data-role="bundle-total"]').forEach(n => {
      n.textContent = v;
      n.style.display = 'block';
      n.style.visibility = 'visible';
    });
  };

  const updateTotal = () => writeTotal(fmt(mainPrice + compPrice()));
  // Sofort, nach DOM-Paint und bei Auswahländerung updaten
  updateTotal();
  requestAnimationFrame(updateTotal);
  setTimeout(updateTotal, 0);

  /* Cart-UI aktualisieren */
  function detectCartSectionHandles(){
    const nodes = Array.from(document.querySelectorAll('[id^="shopify-section-"]'));
    const handles = nodes.map(el => el.id.replace('shopify-section-',''))
      .filter(h => /(cart|drawer|mini|icon|notification)/i.test(h));
    return [...new Set(handles)];
  }
  async function refreshCartUI(){
    try{
      const res = await fetch('/cart.js',{credentials:'same-origin'});
      if (!res.ok) throw new Error('cart.js');
      const cart = await res.json();

      const cnt = document.querySelector('[data-cart-count], .cart-count-bubble .text, .site-header__cart-count');
      if (cnt){ cnt.textContent = cart.item_count; cnt.style.display = cart.item_count ? '' : 'none'; }

      const handles = detectCartSectionHandles();
      if (handles.length){
        const url = `${(window.Shopify?.routes?.root)||'/'}?sections=${handles.join(',')}`;
        const sec = await fetch(url,{credentials:'same-origin'});
        if (sec.ok){
          const htmls = await sec.json();
          Object.keys(htmls||{}).forEach(key => {
            const target = document.getElementById(`shopify-section-${key}`) ||
                           document.querySelector(`[data-section-id="${key}"]`);
            if (target) target.innerHTML = htmls[key];
          });
        }
      }

      if (OPEN_DRAWER){
        const drawer = document.querySelector('cart-drawer');
        if (drawer && typeof drawer.open === 'function') drawer.open();
        const toggle = document.querySelector('[data-drawer-trigger="cart"], [data-cart-toggle], [data-open-cart], button[aria-controls*="Cart"], a[href="/cart"]');
        if (toggle) { try{ toggle.click(); }catch(e){} }
      }
    }catch(e){ if (DEBUG) console.error('refreshCartUI', e); }
  }

  /* Beide Artikel hinzufügen */
  async function addBoth(){
    const btn = root.querySelector('[data-role="bundle-add"]');
    const msg = root.querySelector('.cg-bundle__msg');

    const idInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
    const mainId = idInput?.value
      ? parseInt(idInput.value,10)
      : parseInt(root.querySelector('[data-main-variant-id]').getAttribute('data-main-variant-id'),10);

    const compNode = compEl();
    const compId = compNode ? parseInt(compNode.value,10) : null;
    if (!compId){ msg.textContent='Bitte Variante wählen.'; return; }

    btn.disabled = true; btn.classList.add('is-loading'); msg.textContent='Wird hinzugefügt …';
    try{
      const res = await fetch('/cart/add.js',{
        method:'POST',
        headers:{'Content-Type':'application/json','Accept':'application/json'},
        credentials:'same-origin',
        body: JSON.stringify({ items:[ {id:mainId,quantity:1}, {id:compId,quantity:1} ] })
      });
      if (!res.ok) throw new Error('add failed');

      btn.textContent='Im Warenkorb';
      btn.classList.remove('is-loading');
      msg.textContent='';
      await refreshCartUI();
    }catch(e){
      btn.disabled=false; btn.classList.remove('is-loading');
      msg.textContent='Konnte nicht hinzugefügt werden. Bitte erneut versuchen.';
      if (DEBUG) console.error('addBoth', e);
    }
  }

  const sel = compEl();
  sel && sel.addEventListener('change', updateTotal);
  root.querySelectorAll('[data-role="bundle-add"]').forEach(b => b.addEventListener('click', addBoth));
})();
</script>
{%- endif -%}
