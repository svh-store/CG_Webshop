{%- comment -%}
CG Bundle Inline – FINAL
- zeigt Block nur, wenn ein Cross-Sell vorhanden ist
- Bilder mit dünnem grauen Rahmen
- Cross-Sell klickbar (Bild + Titel -> Produktseite)
- Preis summiert robust (Fallback, auch wenn <select> noch nicht ready)
- Button + Typografie an Theme angelehnt (Variablen mit Fallback)
{%- endcomment -%}

{%- liquid
  assign heading             = heading | default: 'PASSEND DAZU – IM BUNDLE'
  assign allow_variant_select = allow_variant_select | default: true
  assign open_drawer         = open_drawer | default: true
  assign debug               = debug | default: false

  # Metafeld-Quellen (robust)
  assign mf_ns   = mf_ns  | default: 'shopify--discovery--product_recommendation'
  assign mf_key  = mf_key | default: 'complementary_products'
  assign mf1     = product.metafields[mf_ns][mf_key]
  assign mf2     = product.metafields['shopify--discovery']['product_recommendation.complementary_products']
  assign mf3     = product.metafields['shopify--discovery--product_recommendation']['complementary_products']

  assign comp = nil
  if mf1 and mf1.value
    assign comp = mf1.value
  elsif mf2 and mf2.value
    assign comp = mf2.value
  elsif mf3 and mf3.value
    assign comp = mf3.value
  endif
-%}

{%- if comp != blank -%}
<section
  class="cg-bundle cg-bundle--auk"
  data-cg-bundle
  data-product-id="{{ product.id }}"
  data-allow-variant="{{ allow_variant_select }}"
  data-open-drawer="{{ open_drawer }}"
  data-debug="{{ debug }}"
  data-money-format='{{ shop.money_format | json }}'
  data-currency='{{ shop.currency | json }}'>

  <style>
    .cg-bundle{
      /* Theme-nahe Farben/Radius mit Fallbacks */
      --btn-bg: var(--color-button, var(--color-button-background, #F19222));
      --btn-text: var(--color-button-text, #ffffff);
      --btn-radius: var(--buttons-radius, var(--radius-button, 10px));
      --line: #e9ecef;
      --text: var(--color-foreground, #111);
      --muted: #666;
      --tile-desktop: 180px;
      --tile-mobile: 140px;

      max-width:1320px;
      margin:26px auto;
      padding:24px 16px;
      border-top:1px solid var(--line);
      border-bottom:1px solid var(--line);
      background:transparent;
    }

    /* Überschrift an Produkttitel angelehnt */
    .cg-bundle__heading{
      text-transform:uppercase;
      font-weight:900;
      letter-spacing:.06em;
      font-family: var(--font-heading-family, var(--heading-font-family, inherit));
      font-style: var(--font-heading-style, normal);
      font-size: clamp(2.0rem, 2.0vw, 2.6rem);
      color: var(--text);
      text-align:center;
      margin:0 0 18px;
    }

    /* Layout – kompakt wie beim Vorbild */
    .cg-bundle__row{
      display:grid;
      grid-template-columns: max-content 12px max-content 14px 300px;
      column-gap: 16px;
      align-items:center;
      justify-content:center;
    }
    .cg-bundle__card{
      display:flex;
      flex-direction:column;
      align-items:center;
      text-align:center;
      gap:8px;
      background:transparent;
      border:0;
      box-shadow:none;
    }

    /* Bildkachel mit dünnem Rahmen */
    .cg-bundle__media{
      width:var(--tile-desktop);
      aspect-ratio:1/1;
      border-radius:12px;
      display:flex;
      align-items:center;
      justify-content:center;
      padding:10px; /* Rahmen etwas Luft geben */
      border:1px solid #e5e7eb;
      background:#fff;
      transition:border-color .2s ease, transform .2s ease, box-shadow .2s ease;
    }
    .cg-bundle__media:hover{
      border-color: var(--btn-bg);
      transform: translateY(-1px);
      box-shadow: 0 4px 18px rgba(0,0,0,.06);
    }
    .cg-bundle__img{
      max-width:100% !important;
      max-height:100% !important;
      height:auto !important;
      width:auto !important;
      object-fit:contain;
      border-radius:8px;
      display:block;
    }

    /* Titel & Preis unter dem Bild */
    .cg-bundle__title{
      font-weight:700;
      color:var(--text);
      font-size:.95rem;
      line-height:1.25;
      margin-top:2px;
      max-width: 220px; /* verhindert zu breite Spalte */
    }
    .cg-bundle__price{ color:var(--text); font-size:.9rem; }
    .cg-bundle__price--compare{ color:var(--muted); margin-left:6px; }

    /* Plus / Gleich: deutlicher & schwarz */
    .cg-bundle__plus,
    .cg-bundle__equals{
      color:#111;
      font-size:2rem;
      line-height:1;
      text-align:center;
      user-select:none;
    }

    /* Rechte Spalte (Gesamt + Button) */
    .cg-bundle__aside{
      display:flex;
      flex-direction:column;
      gap:12px;
      align-items:flex-start;
    }
    .cg-bundle__total{ display:flex; flex-direction:column; gap:6px; }
    .cg-bundle__total-label{ font-size:.82rem; color:#6b7280; font-weight:600; }
    .cg-bundle__total-amount{
      font-size: 2.6rem; /* an Produktpreis anlehnen */
      font-weight: 800;
      line-height: 1;
      display:block !important;
      visibility:visible !important;
    }

    /* Button wie Produkt-ATC (Radius/Schrift/Farbe via Variablen) */
    .cg-bundle__btn{
      appearance:none;
      border:none;
      cursor:pointer;
      padding:14px 22px;
      border-radius: var(--btn-radius);
      background: var(--btn-bg);
      color: var(--btn-text);
      font-weight: 800;
      font-family: var(--font-body-family, inherit);
      transition: transform .08s ease, filter .15s ease, background .15s ease;
      will-change: transform;
    }
    .cg-bundle__btn:hover{ filter: brightness(0.96); transform: translateY(-1px); }
    .cg-bundle__btn:active{ transform: translateY(0); }
    .cg-bundle__btn.is-loading{ opacity:.7; cursor:wait; }
    .cg-bundle__btn:disabled{ opacity:.6; cursor:default; }

    /* Footer (Fallback) ausblenden im Aukey-Layout */
    .cg-bundle__footer{ display:none; }

    /* Responsive */
    @media (max-width:980px){
      .cg-bundle{ padding:20px 12px; }
      .cg-bundle__row{ grid-template-columns:1fr; gap:14px; }
      .cg-bundle__plus, .cg-bundle__equals{ display:none; }
      .cg-bundle__media{ width:var(--tile-mobile); }
      .cg-bundle__aside{ align-items:stretch; }
      .cg-bundle__btn{ align-self:stretch; text-align:center; }
    }
  </style>

  <div class="cg-bundle__heading">{{ heading }}</div>

  <div class="cg-bundle__row">
    {%- assign main_v = product.selected_or_first_available_variant -%}

    <!-- Hauptprodukt -->
    <article class="cg-bundle__card cg-bundle__card--main"
      data-main-price="{{ main_v.price }}"
      data-main-compare="{{ main_v.compare_at_price | default: 0 }}"
      data-main-variant-id="{{ main_v.id }}">
      <div class="cg-bundle__media" aria-hidden="true">
        {%- assign main_img = product.featured_image | default: product.images.first -%}
        {%- if main_img -%}
          {{ main_img
            | image_url: width: 700, format: 'pjpg'
            | image_tag:
                alt: product.title,
                loading: 'lazy',
                decoding: 'async',
                class: 'cg-bundle__img',
                sizes: '(min-width:980px) 180px, 140px',
                widths: '140, 180, 280, 360' }}
        {%- endif -%}
      </div>
      <div class="cg-bundle__title">{{ product.title }}</div>
      <div class="cg-bundle__price">
        {%- if main_v.compare_at_price > main_v.price -%}
          <span class="cg-bundle__price--sale">{{ main_v.price | money }}</span>
          <s class="cg-bundle__price--compare">{{ main_v.compare_at_price | money }}</s>
        {%- else -%}
          <span>{{ main_v.price | money }}</span>
        {%- endif -%}
      </div>
    </article>

    <!-- Plus -->
    <div class="cg-bundle__plus" aria-hidden="true">+</div>

    <!-- Zusatzprodukt (klickbar) -->
    {%- assign comp_v = comp.selected_or_first_available_variant -%}
    <article class="cg-bundle__card cg-bundle__card--comp"
             data-role="comp"
             data-comp-default="{{ comp_v.price }}">
      <a class="cg-bundle__media" href="{{ comp.url }}" title="{{ comp.title }}">
        {%- assign comp_img = comp.featured_image | default: comp.images.first -%}
        {%- if comp_img -%}
          {{ comp_img
            | image_url: width: 700, format: 'pjpg'
            | image_tag:
                alt: comp.title,
                loading: 'lazy',
                decoding: 'async',
                class: 'cg-bundle__img',
                sizes: '(min-width:980px) 180px, 140px',
                widths: '140, 180, 280, 360' }}
        {%- endif -%}
      </a>
      <a class="cg-bundle__title" href="{{ comp.url }}" title="{{ comp.title }}">{{ comp.title }}</a>

      {%- if comp.variants.size > 1 and allow_variant_select -%}
        <label class="cg-bundle__select" style="display:flex;gap:8px;align-items:center;margin-top:6px;font-size:.9rem;color:var(--muted)">
          <span>Variante</span>
          <select data-role="comp-variant" style="padding:6px 8px;border:1px solid #e5e7eb;border-radius:8px;min-width:180px;background:#fff">
            {%- for vv in comp.variants -%}
              <option value="{{ vv.id }}"
                      data-price="{{ vv.price }}"
                      data-compare="{{ vv.compare_at_price | default: 0 }}"
                      {% unless vv.available %}disabled{% endunless %}
                      {% if vv.id == comp_v.id %}selected{% endif %}>
                {{ vv.title }}{% unless vv.available %} – ausverkauft{% endunless %}
              </option>
            {%- endfor -%}
          </select>
        </label>
      {%- else -%}
        <input type="hidden" data-role="comp-variant"
               value="{{ comp_v.id }}"
               data-price="{{ comp_v.price }}"
               data-compare="{{ comp_v.compare_at_price | default: 0 }}">
      {%- endif -%}

      <div class="cg-bundle__price">
        {%- if comp_v.compare_at_price > comp_v.price -%}
          <span class="cg-bundle__price--sale">{{ comp_v.price | money }}</span>
          <s class="cg-bundle__price--compare">{{ comp_v.compare_at_price | money }}</s>
        {%- else -%}
          <span>{{ comp_v.price | money }}</span>
        {%- endif -%}
      </div>
    </article>

    <!-- Gleich + rechte Spalte -->
    <div class="cg-bundle__equals" aria-hidden="true">=</div>
    <div class="cg-bundle__aside">
      <div class="cg-bundle__total">
        <div class="cg-bundle__total-label">Gesamtpreis</div>
        <div class="cg-bundle__total-amount" data-role="bundle-total">–</div>
      </div>
      <button type="button" class="cg-bundle__btn" data-role="bundle-add">
        Beide in den Warenkorb
      </button>
      <div class="cg-bundle__msg" aria-live="polite"></div>
    </div>
  </div>

  <!-- Fallback-Footer (im Aukey-Layout ausgeblendet) -->
  <div class="cg-bundle__footer">
    <div class="cg-bundle__total">
      <span>Gesamt:</span> <strong data-role="bundle-total">–</strong>
    </div>
    <button type="button" class="cg-bundle__btn" data-role="bundle-add">Beide in den Warenkorb</button>
    <div class="cg-bundle__msg" aria-live="polite"></div>
  </div>
</section>

<script>
(() => {
  const root = document.currentScript.previousElementSibling;
  if (!root || !root.matches('.cg-bundle')) return;

  const DEBUG       = root.getAttribute('data-debug') === 'true';
  const OPEN_DRAWER = root.getAttribute('data-open-drawer') === 'true';
  const moneyFormat = JSON.parse(root.getAttribute('data-money-format') || '"€{{amount}}"');
  const currency    = JSON.parse(root.getAttribute('data-currency') || '"EUR"');
  const log = (...a)=>{ if (DEBUG) console.log('[CG-BUNDLE]', ...a); };

  /* Preise */
  const mainPrice = parseInt(root.querySelector('[data-main-price]')?.getAttribute('data-main-price') || '0', 10);

  const compPrice = () => {
    const el = root.querySelector('[data-role="comp-variant"]');
    if (el) {
      const p = el?.selectedOptions?.[0]?.dataset.price || el?.dataset?.price || '0';
      return parseInt(p, 10);
    }
    const def = root.querySelector('[data-role="comp"]')?.getAttribute('data-comp-default') || '0';
    return parseInt(def, 10);
  };

  const fmt = (c)=> (window.Shopify?.formatMoney)
    ? Shopify.formatMoney(c, moneyFormat)
    : new Intl.NumberFormat(undefined,{style:'currency',currency}).format(c/100);

  const updateTotal = () => {
    const total = mainPrice + compPrice();
    root.querySelectorAll('[data-role="bundle-total"]').forEach(n => n.textContent = fmt(total));
  };

  updateTotal();
  requestAnimationFrame(updateTotal);
  setTimeout(updateTotal, 0);

  /* Cart-UI auffrischen (Badge, Drawer, evtl. Sections) */
  function detectCartSectionHandles(){
    const nodes = Array.from(document.querySelectorAll('[id^="shopify-section-"]'));
    const handles = nodes.map(el => el.id.replace('shopify-section-',''))
      .filter(h => /(cart|drawer|mini|icon|notification)/i.test(h));
    return [...new Set(handles)];
  }
  async function refreshCartUI(){
    try{
      const res = await fetch('/cart.js',{credentials:'same-origin'});
      if (!res.ok) throw new Error('cart.js');
      const cart = await res.json();

      const cnt = document.querySelector('[data-cart-count], .cart-count-bubble .text, .site-header__cart-count');
      if (cnt){ cnt.textContent = cart.item_count; cnt.style.display = cart.item_count ? '' : 'none'; }

      ['cart:refresh','cart:updated','ajaxProduct:added','theme:cart:change','cart:change']
        .forEach(n => {
          document.dispatchEvent(new CustomEvent(n,{detail:{source:'cg-bundle',cart}}));
          window.dispatchEvent(new CustomEvent(n,{detail:{source:'cg-bundle',cart}}));
        });

      const handles = detectCartSectionHandles();
      if (handles.length){
        const url = `${(window.Shopify?.routes?.root)||'/'}?sections=${handles.join(',')}`;
        const sec = await fetch(url,{credentials:'same-origin'});
        if (sec.ok){
          const htmls = await sec.json();
          Object.keys(htmls||{}).forEach(key => {
            const target = document.getElementById(`shopify-section-${key}`) ||
                           document.querySelector(`[data-section-id="${key}"]`);
            if (target) target.innerHTML = htmls[key];
          });
        }
      }

      if (OPEN_DRAWER){
        const drawer = document.querySelector('cart-drawer');
        if (drawer && typeof drawer.open === 'function') drawer.open();
        const toggle = document.querySelector('[data-drawer-trigger="cart"], [data-cart-toggle], [data-open-cart], button[aria-controls*="Cart"], a[href="/cart"]');
        if (toggle) { try{ toggle.click(); }catch(e){} }
      }
    }catch(e){ log('refreshCartUI error', e); }
  }

  /* Beide in den Warenkorb */
  async function addBoth(){
    const btn = root.querySelector('[data-role="bundle-add"]');
    const msg = root.querySelector('.cg-bundle__msg');

    const idInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
    const mainId = idInput?.value
      ? parseInt(idInput.value,10)
      : parseInt(root.querySelector('[data-main-variant-id]')?.getAttribute('data-main-variant-id') || '0',10);

    const compEl = root.querySelector('[data-role="comp-variant"]');
    const compId = compEl ? parseInt(compEl.value,10) : null;
    if (!compId){ msg.textContent='Bitte Variante wählen.'; return; }

    btn.disabled = true; btn.classList.add('is-loading'); msg.textContent='Wird hinzugefügt …';
    try{
      const res = await fetch('/cart/add.js',{
        method:'POST',
        headers:{'Content-Type':'application/json','Accept':'application/json'},
        credentials:'same-origin',
        body: JSON.stringify({ items:[ {id:mainId,quantity:1}, {id:compId,quantity:1} ] })
      });
      if (!res.ok) throw new Error('add failed');

      btn.textContent='Im Warenkorb';
      btn.classList.remove('is-loading');
      msg.textContent='';
      await refreshCartUI();
    }catch(e){
      btn.disabled=false; btn.classList.remove('is-loading');
      msg.textContent='Konnte nicht hinzugefügt werden. Bitte erneut versuchen.';
      if (DEBUG) console.error(e);
    }
  }

  const sel = root.querySelector('[data-role="comp-variant"]');
  sel && sel.addEventListener('change', updateTotal);
  root.querySelectorAll('[data-role="bundle-add"]').forEach(b => b.addEventListener('click', addBoth));
})();
</script>
{%- endif -%}
