{%- comment -%}
CG Bundle Inline (für Custom HTML/Liquid)
Rendert Hauptprodukt + erstes Complementary-Produkt.
Primärquelle: Metafield aus Search & Discovery
  product.metafields['shopify--discovery']['product_recommendation.complementary_products'].value
Fallback: /recommendations/products.json?product_id=...&intent=complementary

Optionale Parameter:
  - heading: Überschrift (String)
  - allow_variant_select: true/false
  - debug: true/false -> zeigt Metafield-Status in der Konsole

WICHTIG: Dieses Snippet nur auf Produktvorlagen verwenden,
damit 'product' verfügbar ist.
{%- endcomment -%}

{%- assign heading = heading | default: 'Passend dazu – im Bundle' -%}
{%- assign allow_variant_select = allow_variant_select | default: true -%}
{%- assign debug = debug | default: false -%}

{%- assign comps_namespace = 'shopify--discovery' -%}
{%- assign comps_key = 'product_recommendation.complementary_products' -%}
{%- assign metafield_obj = product.metafields[comps_namespace][comps_key] -%}
{%- assign comps = metafield_obj.value -%}

<section class="cg-bundle" data-cg-bundle data-product-id="{{ product.id }}"
  data-allow-variant="{{ allow_variant_select }}"
  data-debug="{{ debug }}">
  <h3 class="cg-bundle__heading">{{ heading }}</h3>

  <div class="cg-bundle__wrap" data-role="wrap">
    <!-- Hauptprodukt -->
    <div class="cg-bundle__item cg-bundle__item--main">
      <div class="cg-bundle__media">
        {%- assign main_img = product.featured_image | default: product.images.first -%}
        {%- if main_img -%}
          {{ main_img
            | image_url: width: 720
            | image_tag:
                alt: product.title,
                loading: 'lazy',
                class: 'cg-bundle__img',
                sizes: '(min-width:980px) 96px, 33vw',
                widths: '96,144,192,288,384,576'
          }}
        {%- endif -%}
      </div>
      <div class="cg-bundle__info">
        <div class="cg-bundle__title">{{ product.title }}</div>
        {%- assign v = product.selected_or_first_available_variant -%}
        <div class="cg-bundle__price">
          {%- if v.compare_at_price > v.price -%}
            <span class="cg-bundle__price--sale">{{ v.price | money }}</span>
            <s class="cg-bundle__price--compare">{{ v.compare_at_price | money }}</s>
          {%- else -%}
            <span>{{ v.price | money }}</span>
          {%- endif -%}
        </div>
        <label class="cg-bundle__qty">
          <span>Menge</span>
          <input type="number" min="1" value="1" step="1" inputmode="numeric" pattern="[0-9]*"
                 class="cg-bundle__qty-input" data-role="qty-main">
        </label>
      </div>
    </div>

    <div class="cg-bundle__plus" aria-hidden="true">+</div>

    <!-- Ergänzendes Produkt: zuerst über Metafield rendern, sonst JS-Fallback -->
    <div class="cg-bundle__item cg-bundle__item--comp" data-role="comp">
      {%- if comps != blank and comps.size > 0 -%}
        {%- assign comp = comps | first -%}
        {%- assign comp_variant = comp.selected_or_first_available_variant -%}

        <div class="cg-bundle__media">
          {%- assign comp_img = comp.featured_image | default: comp.images.first -%}
          {%- if comp_img -%}
            {{ comp_img
              | image_url: width: 720
              | image_tag:
                  alt: comp.title,
                  loading: 'lazy',
                  class: 'cg-bundle__img',
                  sizes: '(min-width:980px) 96px, 33vw',
                  widths: '96,144,192,288,384,576'
            }}
          {%- endif -%}
        </div>

        <div class="cg-bundle__info" data-comp-product-id="{{ comp.id }}">
          <div class="cg-bundle__title">{{ comp.title }}</div>

          {%- if comp.variants.size > 1 and allow_variant_select -%}
            <label class="cg-bundle__select">
              <span>Variante</span>
              <select data-role="comp-variant">
                {%- for vv in comp.variants -%}
                  <option value="{{ vv.id }}"
                    {% if vv.available %}{% else %}disabled{% endif %}
                    {% if vv.id == comp_variant.id %}selected{% endif %}>
                    {{ vv.title }}{% unless vv.available %} – ausverkauft{% endunless %}
                  </option>
                {%- endfor -%}
              </select>
            </label>
          {%- else -%}
            <input type="hidden" data-role="comp-variant" value="{{ comp_variant.id }}">
          {%- endif -%}

          <div class="cg-bundle__price">
            {%- if comp_variant.compare_at_price > comp_variant.price -%}
              <span class="cg-bundle__price--sale">{{ comp_variant.price | money }}</span>
              <s class="cg-bundle__price--compare">{{ comp_variant.compare_at_price | money }}</s>
            {%- else -%}
              <span>{{ comp_variant.price | money }}</span>
            {%- endif -%}
          </div>

          <label class="cg-bundle__qty">
            <span>Menge</span>
            <input type="number" min="1" value="1" step="1" inputmode="numeric" pattern="[0-9]*"
                   class="cg-bundle__qty-input" data-role="qty-comp">
          </label>
        </div>
      {%- else -%}
        <!-- Platzhalter, JS füllt hier den Fallback ein -->
        <div class="cg-bundle__info" data-role="comp-empty">
          <div class="cg-bundle__title">Wird geladen …</div>
        </div>
      {%- endif -%}
    </div>
  </div>

  <div class="cg-bundle__cta">
    <button type="button" class="cg-bundle__btn" data-role="bundle-add">Beide in den Warenkorb</button>
    <div class="cg-bundle__msg" aria-live="polite"></div>
  </div>
</section>

<script>
(() => {
  const root = document.currentScript.previousElementSibling;
  if (!root || !root.matches('[data-cg-bundle]')) return;

  const DEBUG = root.getAttribute('data-debug') === 'true';

  function log(...args){ if (DEBUG) console.log('[CG-BUNDLE]', ...args); }

  function getCurrentMainVariantId() {
    const idInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
    if (idInput && idInput.value) return parseInt(idInput.value, 10);
    return {{ product.selected_or_first_available_variant.id }};
  }

  async function fetchComplementaryFallback() {
    const pid = root.getAttribute('data-product-id');
    const url = `/recommendations/products.json?product_id=${pid}&intent=complementary&limit=4`;
    log('Fallback fetch:', url);
    const res = await fetch(url);
    if (!res.ok) throw new Error('recommendations fetch failed');
    const data = await res.json(); // Array von Produkten
    return Array.isArray(data.products) ? data.products : data; // je nach Shopify-Version
  }

  function renderCompFromAPI(p) {
    const wrap = root.querySelector('[data-role="comp"]');
    const allowVariant = root.getAttribute('data-allow-variant') === 'true';

    // Bild
    const imgUrl = (p.featured_image && p.featured_image.url) || (p.images && p.images[0] && p.images[0].url);
    const mediaHTML = imgUrl
      ? `<img src="${imgUrl}&width=384" width="96" height="96" class="cg-bundle__img" alt="${p.title}">`
      : '';

    // Varianten
    let variantSelectHTML = '';
    let hiddenVariantHTML = '';
    let defaultVariantId = (p.variants && p.variants.length) ? p.variants[0].id : null;

    if (allowVariant && p.variants && p.variants.length > 1) {
      variantSelectHTML = `
        <label class="cg-bundle__select">
          <span>Variante</span>
          <select data-role="comp-variant">
            ${p.variants.map(v =>
              `<option value="${v.id}" ${v.available ? '' : 'disabled'}>${v.title}${v.available ? '' : ' – ausverkauft'}</option>`
            ).join('')}
          </select>
        </label>`;
    } else if (defaultVariantId) {
      hiddenVariantHTML = `<input type="hidden" data-role="comp-variant" value="${defaultVariantId}">`;
    }

    // Preis (einfacher, da JSON-Struktur je nach Theme variieren kann)
    const price = p.price ? (p.price/100).toLocaleString(undefined, {style:'currency', currency:'EUR'}) : '';
    const compare = p.compare_at_price ? (p.compare_at_price/100).toLocaleString(undefined, {style:'currency', currency:'EUR'}) : '';

    wrap.innerHTML = `
      <div class="cg-bundle__media">${mediaHTML}</div>
      <div class="cg-bundle__info" data-comp-product-id="${p.id}">
        <div class="cg-bundle__title">${p.title}</div>
        <div class="cg-bundle__price">
          ${ (p.compare_at_price && p.compare_at_price > p.price)
              ? `<span class="cg-bundle__price--sale">${price}</span><s class="cg-bundle__price--compare">${compare}</s>`
              : `<span>${price}</span>`
          }
        </div>
        ${variantSelectHTML || hiddenVariantHTML}
        <label class="cg-bundle__qty">
          <span>Menge</span>
          <input type="number" min="1" value="1" step="1" inputmode="numeric" pattern="[0-9]*"
                 class="cg-bundle__qty-input" data-role="qty-comp">
        </label>
      </div>`;
  }

  async function ensureCompExists() {
    const empty = root.querySelector('[data-role="comp-empty"]');
    if (!empty) { log('Metafield present – no fallback needed'); return; }
    try {
      const list = await fetchComplementaryFallback();
      const first = Array.isArray(list) ? list[0] : (list.products && list.products[0]);
      if (first) {
        log('Fallback product:', first);
        renderCompFromAPI(first);
      } else {
        empty.innerHTML = '<div class="cg-bundle__title">Kein Ergänzungsprodukt gefunden.</div>';
      }
    } catch(e) {
      log('Fallback error:', e);
      empty.innerHTML = '<div class="cg-bundle__title">Ergänzungsprodukt konnte nicht geladen werden.</div>';
    }
  }

  async function addBothToCart() {
    const btn = root.querySelector('[data-role="bundle-add"]');
    const msg = root.querySelector('.cg-bundle__msg');
    const qtyMain = parseInt(root.querySelector('[data-role="qty-main"]').value || '1', 10);
    const qtyComp = parseInt(root.querySelector('[data-role="qty-comp"]').value || '1', 10);
    const compVariantEl = root.querySelector('[data-role="comp-variant"]');
    const compVariantId = compVariantEl ? parseInt(compVariantEl.value, 10) : null;
    const mainVariantId = getCurrentMainVariantId();

    if (!compVariantId) {
      msg.textContent = 'Bitte Variante wählen.';
      return;
    }

    btn.disabled = true; msg.textContent = 'Wird hinzugefügt …';

    try {
      const res = await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({
          items: [
            { id: mainVariantId, quantity: Math.max(1, qtyMain) },
            { id: compVariantId, quantity: Math.max(1, qtyComp) }
          ]
        })
      });
      if (!res.ok) throw new Error('Add failed');
      msg.textContent = 'Beide Artikel liegen im Warenkorb.';
      btn.disabled = false;
      document.dispatchEvent(new CustomEvent('cart:refresh'));
    } catch(e) {
      msg.textContent = 'Konnte nicht hinzugefügt werden. Bitte erneut versuchen.';
      btn.disabled = false;
    }
  }

  ensureCompExists();
  root.querySelector('[data-role="bundle-add"]').addEventListener('click', addBothToCart);
})();
</script>
